pipeline {
  agent any

  environment {
    CIRCLECI_TOKEN        = credentials('CIRCLECI_TOKEN')
    BACKEND_PROJECT       = 'circleci/8eDo7gsovy8n4ZEdNpncs7/KwAaRbtqoqnubyNUgV7Fq1'
    BACKEND_DEFINITION_ID = 'adf14913-c389-4688-81ed-8b4939dd4cdf'
    DEPLOY_TARGET         = 'test@192.0.3.10'
  }

  stages {
    stage('Trigger CircleCI Backend') {
      steps {
        echo "üöÄ Triggering CircleCI Backend Project"

        script {
          def response = sh(
            script: """
              curl --silent --location 'https://circleci.com/api/v2/project/${BACKEND_PROJECT}/pipeline/run' \\
              --header 'Circle-Token: ${CIRCLECI_TOKEN}' \\
              --header 'Content-Type: application/json' \\
              --data '{
                "definition_id": "${BACKEND_DEFINITION_ID}",
                "config": {
                  "branch": "backend-main"
                },
                "checkout": {
                  "branch": "backend-main"
                }
              }'
            """,
            returnStdout: true
          ).trim()

          def pipelineId = sh(
            script: "echo '${response}' | jq -r '.id'",
            returnStdout: true
          ).trim()

          writeFile file: 'pipeline_id.txt', text: pipelineId
          echo "‚úÖ Triggered Pipeline ID: ${pipelineId}"
        }
      }
    }

    stage('Poll CircleCI Pipeline Status') {
      steps {
        script {
          def pipelineId = readFile('pipeline_id.txt').trim()
          echo "‚è≥ Polling CircleCI Workflow Status (ID: ${pipelineId})"

          def workflowId = ""
          def workflowStatus = ""
          def buildNumber = ""
          def retryCount = 0
          def maxRetries = 30
          def intervalSec = 10

          // 1. ÏõåÌÅ¨ÌîåÎ°úÏö∞ ID Í∞ÄÏ†∏Ïò§Í∏∞
          workflowId = sh(
            script: """
              curl --silent --location "https://circleci.com/api/v2/pipeline/${pipelineId}/workflow" \\
              --header "Circle-Token: ${CIRCLECI_TOKEN}" | jq -r '.items[0].id'
            """,
            returnStdout: true
          ).trim()

          // 2. ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÉÅÌÉú ÌôïÏù∏ Î£®ÌîÑ
          while (true) {
            sleep intervalSec
            retryCount++

            workflowStatus = sh(
              script: """
                curl --silent --location "https://circleci.com/api/v2/workflow/${workflowId}" \\
                --header "Circle-Token: ${CIRCLECI_TOKEN}" | jq -r '.status'
              """,
              returnStdout: true
            ).trim()

            echo "[${retryCount}] Workflow status: ${workflowStatus}"

            if (workflowStatus in ["running", "not_run", "on_hold"]) {
              continue
            }

            if (workflowStatus in ["failed", "failing", "error", "canceled", "unauthorized"]) {
              error("‚ùå CircleCI workflow failed with status: ${workflowStatus}")
            }

            if (workflowStatus == "success") {
              echo "‚úÖ CircleCI workflow completed successfully!"
              break
            }

            if (retryCount >= maxRetries) {
              error("‚è∞ Timed out waiting for CircleCI workflow to complete.")
            }
          }

          // 3. docker-build-and-push jobÏùò job_number = CircleCI ÎπåÎìú Î≤àÌò∏
          buildNumber = sh(
            script: """
              curl --silent --location "https://circleci.com/api/v2/workflow/${workflowId}/job" \\
              --header "Circle-Token: ${CIRCLECI_TOKEN}" \\
              | jq -r '.items[] | select(.name == "docker-build-and-push") | .job_number'
            """,
            returnStdout: true
          ).trim()

          echo "üì¶ CircleCI Docker Build Number: ${buildNumber}"
          writeFile file: 'circleci_build_number.txt', text: buildNumber
        }
      }
    }

    stage('SSH Deploy to Kubernetes') {
      steps {
        script {
          def buildTag = readFile('circleci_build_number.txt').trim()
          echo "üöÄ Deploying All Module YAMLs with TAG: ${buildTag}"

          sh """
            for dir in cicd/backend/k8s/*; do
              module=\$(basename \$dir)
              echo "üì¶ Deploying YAMLs for module: \$module"

              ssh -o StrictHostKeyChecking=no ${DEPLOY_TARGET} "mkdir -p /home/test/k8s/\$module"

              for file in \$dir/*.yml; do
                echo "üìÇ Sending \$file"
                scp -o StrictHostKeyChecking=no \$file ${DEPLOY_TARGET}:/home/test/k8s/\$module/
                ssh -o StrictHostKeyChecking=no ${DEPLOY_TARGET} "sed -i 's/latest/0.1.${buildTag}/g' /home/test/k8s/\$module/\$(basename \$file)"
                ssh -o StrictHostKeyChecking=no ${DEPLOY_TARGET} "kubectl apply -f /home/test/k8s/\$module/\$(basename \$file)"
              done
            done
          """

          echo "üö¶ Rolling update based on BUILD_ID"

          sh """
            even_or_odd=\$((BUILD_ID % 2))
            echo "üî¢ BUILD_ID: \$BUILD_ID ‚Üí \$even_or_odd (0 = green, 1 = blue)"

            if [ "\$even_or_odd" -eq 0 ]; then
              echo "üü¢ Activating GREEN deployments"

              for svc in app-api resv-api gateway; do
                ssh ${DEPLOY_TARGET} kubectl rollout status -n default -f /home/test/k8s/\$svc/\$svc-deployment-green.yml
                ssh ${DEPLOY_TARGET} kubectl wait --for=condition=available -n default -f /home/test/k8s/\$svc/\$svc-deployment-green.yml --timeout=120s
                ssh ${DEPLOY_TARGET} kubectl apply -f /home/test/k8s/\$svc/\$svc-service-green.yml
                ssh ${DEPLOY_TARGET} kubectl scale -n default -f /home/test/k8s/\$svc/\$svc-deployment-blue.yml --replicas=0 || true
              done

            else
              echo "üîµ Activating BLUE deployments"

              for svc in app-api resv-api gateway; do
                ssh ${DEPLOY_TARGET} kubectl rollout status -n default -f /home/test/k8s/\$svc/\$svc-deployment-blue.yml
                ssh ${DEPLOY_TARGET} kubectl wait --for=condition=available -n default -f /home/test/k8s/\$svc/\$svc-deployment-blue.yml --timeout=120s
                ssh ${DEPLOY_TARGET} kubectl apply -f /home/test/k8s/\$svc/\$svc-service-blue.yml
                ssh ${DEPLOY_TARGET} kubectl scale -n default -f /home/test/k8s/\$svc/\$svc-deployment-green.yml --replicas=0 || true
              done
            fi

            # üü° discovery Îäî Î∏îÎ£®Í∑∏Î¶∞ ÏóÜÏù¥ ÏùºÎ∞ò Î∞∞Ìè¨
            ssh ${DEPLOY_TARGET} kubectl rollout status -n default -f /home/test/k8s/discovery/discovery-deployment.yml
            ssh ${DEPLOY_TARGET} kubectl apply -f /home/test/k8s/discovery/discovery-service.yml
          """
        }
      }
    }
  }
}
