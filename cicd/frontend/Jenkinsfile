pipeline {
    agent any
    environment {
        DEPLOY_TARGET = 'test@192.0.3.10'
        CIRCLECI_TOKEN = credentials('CIRCLECI_TOKEN')
        FRONTEND_PROJECT = 'circleci/8eDo7gsovy8n4ZEdNpncs7/Grs7V17X6iQXz9ZFuC9dMc'
        FRONTEND_DEFINITION_ID = 'a7dd516f-c476-40fd-8177-2f4d4d50bdda'
    }

    stages {
        stage('Trigger CircleCI Frontend') {
            steps {
                script {
                    echo "üöÄ Triggering CircleCI Frontend Project"

                    def response = sh(
                        script: """
                            curl --silent --location 'https://circleci.com/api/v2/project/${FRONTEND_PROJECT}/pipeline/run' \\
                            --header 'Circle-Token: ${CIRCLECI_TOKEN}' \\
                            --header 'Content-Type: application/json' \\
                            --data '{
                                "definition_id": "${FRONTEND_DEFINITION_ID}",
                                "config": { "branch": "frontend-main" },
                                "checkout": { "branch": "frontend-main" }
                            }'
                        """,
                        returnStdout: true
                    ).trim()

                    def pipelineId = sh(
                        script: "echo '${response}' | jq -r '.id'",
                        returnStdout: true
                    ).trim()

                    writeFile file: 'frontend_pipeline_id.txt', text: pipelineId
                    echo "‚úÖ Triggered Pipeline ID: ${pipelineId}"
                }
            }
        }

        stage('Poll CircleCI Frontend Pipeline Status') {
            steps {
                script {
                    def pipelineId = readFile('frontend_pipeline_id.txt').trim()
                    echo "‚è≥ Polling CircleCI Workflow Status (ID: ${pipelineId})"

                    def workflowId = sh(
                        script: """
                            curl --silent --location "https://circleci.com/api/v2/pipeline/${pipelineId}/workflow" \\
                            --header "Circle-Token: ${CIRCLECI_TOKEN}" | jq -r '.items[0].id'
                        """,
                        returnStdout: true
                    ).trim()

                    def status = ""
                    def maxRetries = 30
                    def retryCount = 0
                    def intervalSec = 10

                    while (true) {
                        sleep intervalSec
                        retryCount++

                        status = sh(
                            script: """
                                curl --silent --location "https://circleci.com/api/v2/workflow/${workflowId}" \\
                                --header "Circle-Token: ${CIRCLECI_TOKEN}" | jq -r '.status'
                            """,
                            returnStdout: true
                        ).trim()

                        echo "[${retryCount}] Workflow status: ${status}"

                        if (status == "success") {
                            echo "‚úÖ Workflow completed successfully!"
                            break
                        }

                        if (status in ["failed", "failing", "error", "canceled", "unauthorized"]) {
                            error("‚ùå Workflow failed: ${status}")
                        }

                        if (retryCount >= maxRetries) {
                            error("‚è∞ Timed out waiting for workflow completion.")
                        }
                    }

                    def buildNumber = sh(
                        script: """
                            curl --silent --location "https://circleci.com/api/v2/workflow/${workflowId}/job" \\
                            --header "Circle-Token: ${CIRCLECI_TOKEN}" | jq -r '.items[] | select(.name == "docker-build-and-push") | .job_number'
                        """,
                        returnStdout: true
                    ).trim()

                    echo "üê≥ CircleCI Build Number: ${buildNumber}"
                    writeFile file: 'frontend_circleci_build_number.txt', text: buildNumber
                }
            }
        }

               stage('Deploy Canary B') {
          steps {
            script {
                def buildTag = readFile('frontend_circleci_build_number.txt').trim()
                  echo "üöÄ Deploying Frontend YAMLs with tag: ${buildTag}"
                
                echo "üì§ Sending frontend YAMLs to remote server..."
             sh """
                    module="frontend"
                    local_dir="cicd/frontend/k8s"
                    remote_dir="/home/test/k8s/\$module"
            
                    echo "üì¶ Deploying YAMLs for module: \$module"
            
                    ssh -o StrictHostKeyChecking=no test@192.0.3.10 "mkdir -p \$remote_dir"
            
                    for file in \$local_dir/*.yml; do
                      filename=\$(basename \$file)
                      echo "üì§ Copying \$filename to remote"
            
                      scp -o StrictHostKeyChecking=no \$file test@192.0.3.10:\$remote_dir/
                      
                      echo "üõ† Replacing 'latest' with version tag 0.1.${buildTag} in \$filename"
                      ssh -o StrictHostKeyChecking=no test@192.0.3.10 "sed -i 's/latest/0.1.${buildTag}/g' \$remote_dir/\$filename"
                      
                      echo "üöÄ Applying \$filename"
                      ssh -o StrictHostKeyChecking=no test@192.0.3.10 "kubectl apply -f \$remote_dir/\$filename"
                    done
            
                    echo "üïπ Adjusting ingress canary routing..."
            
                    ssh -o StrictHostKeyChecking=no test@192.0.3.10 "sleep 5 && kubectl patch ingress frontend-ingress-canary -p '{\\\"metadata\\\":{\\\"annotations\\\":{\\\"nginx.ingress.kubernetes.io/canary-weight\\\":\\\"50\\\"}}}'"
            
                    ssh -o StrictHostKeyChecking=no test@192.0.3.10 "sleep 5 && kubectl patch ingress frontend-ingress-canary -p '{\\\"metadata\\\":{\\\"annotations\\\":{\\\"nginx.ingress.kubernetes.io/canary-weight\\\":\\\"100\\\"}}}'"
            
                    ssh -o StrictHostKeyChecking=no test@192.0.3.10 "sleep 5 && kubectl patch ingress frontend-ingress-canary -p '{\\\"metadata\\\":{\\\"annotations\\\":{\\\"nginx.ingress.kubernetes.io/canary\\\":\\\"false\\\"}}}'"
            
                    echo "‚úÖ Canary flow completed. Now scaling down A..."
            
                    ssh -o StrictHostKeyChecking=no test@192.0.3.10 "kubectl scale deployment frontend-deployment-a --replicas=0"
                  """
            }
          }
        }
    }
}
